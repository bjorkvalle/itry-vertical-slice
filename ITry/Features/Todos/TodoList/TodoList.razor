@namespace ITry.Features
@inject IMediator Mediator

<div class="flex flex-col gap-3 items-center justify-center">
    <Loop Items="ActiveTodos" TItem="TodoItemModel" Context="item">
        <TodoItem Model="item" OnUpdate="HandleProgressUpdate" />
    </Loop>
</div>

@if (ShowInactive)
{
    <div class="divider"></div>
    <div class="flex flex-col gap-3 items-center justify-center">
        <Loop Items="InActiveTodos" TItem="TodoItemModel" Context="item">
            <TodoItem Model="item" />
        </Loop>
    </div>
}

@code {
    [Parameter] public bool ShowInactive { get; set; }
    [Parameter] public EventCallback<bool> OnSaving { get; set; }

    private IEnumerable<TodoItemModel> todos;
    private CancellationTokenSource saveToken;
    private int saveTimeout = 1000;

    protected async override Task OnInitializedAsync()
    {
        todos = await Mediator.Send(new GetTodoItemsQuery());
    }

    private void HandleProgressUpdate()
    {
        if (saveToken != null)
            TimeoutHelper.ClearTimeout(saveToken);

        saveToken = TimeoutHelper.SetTimeout(async () =>
        {
            await OnSaving.InvokeAsync(true);
            await Mediator.Send(new UpdateProgressCommand(todos));
            await OnSaving.InvokeAsync(false);
        }, saveTimeout);
    }

    public IEnumerable<TodoItemModel> ActiveTodos => todos.Where(x => x.IsActive);
    public IEnumerable<TodoItemModel> InActiveTodos => todos.Where(x => !x.IsActive);
    
}
